class Solution {
public:

    int countSubsetSum( vector<int> & arr , int sum , int z)
    {
        int n= arr.size();

        //top down array is made
        
        vector<vector<int>> t (n+1, vector<int>(sum + 1, 0));

        for( int i=0; i<n+1; i++)
        {
            for( int j=0 ; j< sum+1; j++)
            {
                //first row is 0 b/c no item is present 
                if( i==0)   t[i][j]=0;

                //first column is 1 bc null set can be generated for sum=0;
                if(j==0)    t[i][j]=1;
            }
        }

        //We will solve problem considering there is no zeroes in the input array
        for(int i=1 ; i< n+1 ; i++)
        {
            for( int j=1 ; j< sum+1 ; j++)
            {
                // if zero is there
                if (arr[i - 1] == 0)
                {
                     t[i][j] = t[i - 1][j];
                }
                   
                //if item weight is less than target
                else if( arr[i-1] <= j)
                {
                    t[i][j]= t[i-1][j-arr[i-1] ] + t[i-1][j];
                }

                else
                {
                    t[i][j]= t[i-1][j];
                }
            }
        }
        
        // Each zero can be put in either of the partitions, so 2^z ways to do this
        return pow( 2, z) * t[n][sum];

    }


    int findTargetSumWays(vector<int>& nums, int target)
    {
        int n= nums.size();
         
        //edge case: when 1 element is there
        if (n == 1) {

            if( nums[0]==0 )
            {
                return 2;
            }

            if (abs(nums[0]) == abs(target))
                return 1;
            else
                return 0;
        }

        // We will solve problem considering there is no zeroes in the input array, and we will
        // deal with it in  the last
        int z=0;
        for( int i=0 ; i< n ; i++)
        {
            if( nums[i]==0)   z++;
        }


        //calculate sum
        int sum=0;
        for( int i=0 ; i< n ; i++)
        {
            sum +=nums[i];
        }

        // Because the sum of a subset can't be in decimals
        if( (sum+target) % 2 == 1)
        {
            return 0;
        }

        // target cannot be negative 
        if (target < 0 && z==0)
            return 0;

        int val= (target +sum)/2;

        //call countsubsetsum
        return countSubsetSum( nums ,  val , z);
    }
};
