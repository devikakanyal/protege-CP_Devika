class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix)
    {
        int n=matrix.size();
        vector<vector<int>> dp( n , vector<int> ( n , 0) );

        //initialization
        for( int j=0 ; j< n ; j++)
        {
            dp[0][j]= matrix[0][j];
        }

        //copy recursion
        for(int i=1; i< n ; i++)
        {
            for( int j=0 ; j< n ; j++)
            {
                int up_left=INT_MAX;
                int up=INT_MAX;
                int up_right=INT_MAX;

                if( j != 0 ) up_left= matrix[i][j] + dp[i-1][j-1];

                up=matrix[i][j]+ dp[i-1][j];

                if( j!= n-1) up_right=matrix[i][j]+ dp[i-1][j+1];

                dp[i][j]= min( { up , up_left , up_right});

            }

        }

        int ans=INT_MAX;
        for( int j=0 ; j< n ; j++)
        {
            ans= min( ans , dp[n-1][j]);
        }

        return ans;

    }
};
